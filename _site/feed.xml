<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TmmGeek</title>
    <description>A reserved &lt;a href=&quot;http://jekyllrb.com&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; theme that places the utmost gravity on content with a hidden drawer. Made by &lt;a href=&quot;https://twitter.com/mdo&quot; target=&quot;_blank&quot;&gt;@mdo&lt;/a&gt;.</description>
    <link>http://lanyon.getpoole.com/</link>
    <atom:link href="http://lanyon.getpoole.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 19 Jan 2016 11:14:19 -0600</pubDate>
    <lastBuildDate>Tue, 19 Jan 2016 11:14:19 -0600</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Introducing Regular expression</title>
        <description>&lt;p&gt;This tutorial is made to show you how you can use &lt;a href=&quot;https://www.google.com/?gws_rd=ssl#q=regular+expression&quot;&gt;Regular Expression&lt;/a&gt; and a text editor to make your day to day office work easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://viblo.asia/uploads/images/d9a2a14598974e7cc9ea922a835c70496648865f/8b06b3b2f79f332104e71323d7865d2c6de7379d.png&quot; alt=&quot;ddd&quot; /&gt;&lt;/p&gt;

&lt;!--break--&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequsite&quot; id=&quot;markdown-toc-prerequsite&quot;&gt;prerequsite&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#download-and-install-sublime-text-editorhttpwwwsublimetextcom2&quot; id=&quot;markdown-toc-download-and-install-sublime-text-editorhttpwwwsublimetextcom2&quot;&gt;download and install &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;sublime text editor&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#download-the-text-file-you-will-need-for-this-tutorial-here&quot; id=&quot;markdown-toc-download-the-text-file-you-will-need-for-this-tutorial-here&quot;&gt;download the text file you will need for this tutorial &lt;a href=&quot;&quot;&gt;here&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot; id=&quot;markdown-toc-getting-started&quot;&gt;Getting started&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#shushy-words-example&quot; id=&quot;markdown-toc-shushy-words-example&quot;&gt;Shushy words example&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#speech-coach-example&quot; id=&quot;markdown-toc-speech-coach-example&quot;&gt;Speech coach example&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#refex-for-a-moment&quot; id=&quot;markdown-toc-refex-for-a-moment&quot;&gt;refex for a moment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-visual-regex-testerhttpwwwocpsoftorgtutorialsregular-expressionsjava-visual-regex-tester&quot; id=&quot;markdown-toc-the-visual-regex-testerhttpwwwocpsoftorgtutorialsregular-expressionsjava-visual-regex-tester&quot;&gt;The &lt;a href=&quot;http://www.ocpsoft.org/tutorials/regular-expressions/java-visual-regex-tester/&quot;&gt;visual Regex Tester&lt;/a&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#regex-cheatsheet&quot; id=&quot;markdown-toc-regex-cheatsheet&quot;&gt;Regex Cheatsheet&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#practical-use-with-text-editors-for-everyone&quot; id=&quot;markdown-toc-practical-use-with-text-editors-for-everyone&quot;&gt;Practical use with text editors for everyone.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequsite&quot;&gt;prerequsite&lt;/h2&gt;

&lt;h3 id=&quot;download-and-install-sublime-text-editorhttpwwwsublimetextcom2&quot;&gt;download and install &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;sublime text editor&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;you can use either PC or Mac for this tutorial.&lt;/p&gt;

&lt;h3 id=&quot;download-the-text-file-you-will-need-for-this-tutorial-here&quot;&gt;download the text file you will need for this tutorial &lt;a href=&quot;&quot;&gt;here&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;So, What is &lt;a href=&quot;https://www.google.com/?gws_rd=ssl#q=regular+expression&quot;&gt;Regular expression&lt;/a&gt; ? Let’s pull up a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;wikipedia defintion&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;h3 id=&quot;shushy-words-example&quot;&gt;Shushy words example&lt;/h3&gt;

&lt;p&gt;Let’s get to the practical side of the story.&lt;/p&gt;

&lt;p&gt;To start simple, let’s say you want to extract certain characters out of a text file.&lt;/p&gt;

&lt;p&gt;For example, the following&lt;/p&gt;

&lt;p&gt;famous tourist tongue twister.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sh&lt;/strong&gt;e sells sea-&lt;strong&gt;sh&lt;/strong&gt;ells on the sea-&lt;strong&gt;sh&lt;/strong&gt;ore.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;sh&lt;/strong&gt;ells &lt;strong&gt;sh&lt;/strong&gt;e sells are sea-&lt;strong&gt;sh&lt;/strong&gt;ells, I’m &lt;strong&gt;su&lt;/strong&gt;re.&lt;/p&gt;

&lt;p&gt;For if &lt;strong&gt;sh&lt;/strong&gt;e sells sea-&lt;strong&gt;sh&lt;/strong&gt;ells on the sea-&lt;strong&gt;sh&lt;/strong&gt;ore&lt;/p&gt;

&lt;p&gt;Then I’m &lt;strong&gt;su&lt;/strong&gt;re &lt;strong&gt;sh&lt;/strong&gt;e sells sea-&lt;strong&gt;sh&lt;/strong&gt;ore &lt;strong&gt;sh&lt;/strong&gt;ells.&lt;/p&gt;

&lt;p&gt;By using some simple regular expression syntax, I can extract all the words with the&lt;/p&gt;

&lt;p&gt;“Sh” sound.&lt;/p&gt;

&lt;p&gt;To illustrate the idea, I wrote a program in java to fulfill such task.&lt;/p&gt;

&lt;div style=&quot;width:700px;height:300px;line-height:3em;overflow:auto;padding:5px;&quot;&gt;
&lt;pre&gt;
&lt;code&gt;
	class FindAllTheShWords{
 public void FindAllTheShushyWords(String args) {
 
      String script = args;
      Pattern pattern = Pattern.compile(&quot;(\\w*(sh|ti|su)\\w*)&quot;);
      Matcher matcher = pattern.matcher(script);
      while (matcher.find()){
        System.out.printf(&quot;%s is a shushy word because of %s. %n&quot;,
                        matcher.group(1),
                        matcher.group(2));
      } 
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(you don’t have to study the code above if you are not a programmer)&lt;/p&gt;

&lt;h3 id=&quot;speech-coach-example&quot;&gt;Speech coach example&lt;/h3&gt;

&lt;p&gt;Ok, now let’s get more complicated, how about I were a speech couch, and I want to&lt;/p&gt;

&lt;p&gt;select all the words that have the “Sh” sound to help my students to practice&lt;/p&gt;

&lt;p&gt;speaking them?&lt;/p&gt;

&lt;p&gt;Here is another Java program I wrote to fullfill this task.&lt;/p&gt;

&lt;div style=&quot;width:700px;height:300px;line-height:3em;overflow:auto;padding:5px;&quot;&gt;
&lt;pre&gt;
&lt;code&gt;
class FindAllWordsWith {
  public void AllTheWordsEndWithED(String args) {
 
      String script = args;
      Pattern pattern = Pattern.compile(&quot;(\\w*(ed)\\b)&quot;);
      Matcher matcher = pattern.matcher(script);
      while (matcher.find()){
        System.out.printf(
          
          &quot; you must emphasize &quot;+
                        matcher.group(2)+&quot; sound in the word &quot; +
                        matcher.group(1)+&quot;%n&quot;);
      }
      
    }
    public void AllTheWordsEndWithTorD(String args) {
 
      String script = args;
      Pattern pattern = Pattern.compile(&quot;(\\w*(d|t)\\b)&quot;);
      Matcher matcher = pattern.matcher(script);
      while (matcher.find()){
        System.out.printf(
          
          &quot; you must emphasize &quot;+
                        matcher.group(2)+&quot; sound in the word &quot; +
                        matcher.group(1)+&quot;%n&quot;);
      }
      
    } 
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, by using some basic combination of &lt;em&gt;regular expression&lt;/em&gt;, you can do a lot of&lt;/p&gt;

&lt;p&gt;things that could have no limit but your imagination. For example, the many DNA sequencing softwares such as the powerful &lt;a href=&quot;http://blast.ncbi.nlm.nih.gov/Blast.cgi&quot;&gt;Blast on NCBI&lt;/a&gt;, or how about the post office wants to build an App that can recognize all &lt;a href=&quot;http://stackoverflow.com/questions/578406/what-is-the-ultimate-postal-code-and-zip-regex&quot;&gt;Postal code patterns&lt;/a&gt; around the world, in order to make their shipment task easier? Or how about &lt;a href=&quot;http://www.r-bloggers.com/slightly-more-than-basic-sentiment-analysis/&quot;&gt;sentiment analysis&lt;/a&gt; or spotting trends from twitter feeds or Facebook etc.&lt;/p&gt;

&lt;p&gt;Now, you may say, wait a minute, you showed me the defintion of Regular Expression and&lt;/p&gt;

&lt;p&gt;I more or less grasp some of its powerful functionalities, but I still don’t&lt;/p&gt;

&lt;p&gt;exactly know to use it and how it could benefit my works? besides, I am not programmer&lt;/p&gt;

&lt;p&gt;and I don’t write code. Don’t worry, you don’t have to be a programmer in order to use the functions of “regular expression”&lt;/p&gt;

&lt;h2 id=&quot;refex-for-a-moment&quot;&gt;refex for a moment&lt;/h2&gt;
&lt;p&gt;Before I walk you through all the basic details, I would like you to pause for a&lt;/p&gt;

&lt;p&gt;few seconds and reflex.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;What are some of the other possibilities you have in mind?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;and do you remember what is the definiton of Regular Expression?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(the same quizs on video)&lt;/p&gt;

&lt;h2 id=&quot;the-visual-regex-testerhttpwwwocpsoftorgtutorialsregular-expressionsjava-visual-regex-tester&quot;&gt;The &lt;a href=&quot;http://www.ocpsoft.org/tutorials/regular-expressions/java-visual-regex-tester/&quot;&gt;visual Regex Tester&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Now let’s introduce a few very basic expression syntaxs in the table below.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Function&lt;/th&gt;
      &lt;th&gt;Syntax&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;all the letters&lt;/td&gt;
      &lt;td&gt;\w&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;all the words&lt;/td&gt;
      &lt;td&gt;\w*&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;all the words with the letter d&lt;/td&gt;
      &lt;td&gt;\w*(d)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;or&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;all the words with d or t&lt;/td&gt;
      &lt;td&gt;\w*(d|t)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;all the words end with d or t&lt;/td&gt;
      &lt;td&gt;\w*(d|t)\b&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, I encourage you to open &lt;a href=&quot;http://www.ocpsoft.org/tutorials/regular-expressions/java-visual-regex-tester/&quot;&gt;visual Regex Tester&lt;/a&gt; and following along as I show you in the video.&lt;/p&gt;

&lt;h3 id=&quot;regex-cheatsheet&quot;&gt;Regex Cheatsheet&lt;/h3&gt;
&lt;p&gt;Besides these few simple expressions, you can visit &lt;a href=&quot;http://www.rexegg.com/regex-quickstart.html&quot;&gt;The Regex Cheetsheet&lt;/a&gt; or &lt;a href=&quot;https://www.google.com/?gws_rd=ssl#q=regular+expression+documentation&quot;&gt;some other documentation sites&lt;/a&gt; to learn more useful expressions.&lt;/p&gt;

&lt;h2 id=&quot;practical-use-with-text-editors-for-everyone&quot;&gt;Practical use with text editors for everyone.&lt;/h2&gt;

&lt;p&gt;Now, Let’s demonstrate how you can use Regular Expression with text editors.&lt;/p&gt;

&lt;p&gt;There are many good &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_text_editors&quot;&gt;text editors&lt;/a&gt; out there, but I personally love the sublime text and you can &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;download it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(see demonstrating from video)&lt;/p&gt;

&lt;p&gt;I hope you would benefit from this, please leave your feedback and comments.&lt;/p&gt;

&lt;p&gt;share the resources
http://www.rexegg.com/regex-quickstart.html&lt;/p&gt;

</description>
        <pubDate>Mon, 18 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/regular%20expression/2016/01/18/regular-expression-video-project/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/regular%20expression/2016/01/18/regular-expression-video-project/</guid>
        
        <category>java</category>
        
        <category>regular expression</category>
        
        
        <category>regular expression</category>
        
      </item>
    
      <item>
        <title>Regular Expression Java</title>
        <description>&lt;p&gt;[](http://www.tutorialspoint.com/java/java_regular_expressions.htm)&lt;/p&gt;

&lt;p&gt;import java.io.Console;
import java.util.regex.Pattern;
import java.util.regex.Matcher;&lt;/p&gt;

&lt;p&gt;class Reggie {
  public void main(String args) {
    Console console = System.console();
    // Your amazing code below
  String zipCode = args;
    if (zipCode.matches(“^\d{5}(-\d{4})?$”)){
      System.out.printf(“%s is a valid zip code%n”, zipCode);
    }else{
    System.out.printf(“%s is not a valid zip code%n”, zipCode);
    }
  String skills = “JavaScript, HTML, CSS, Java”;
    for (String skill:skills.split(“\W+”)){
        System.out.printf(“Skill: %s %n”, skill);
    }
  }
}&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/2016/01/18/regular-expression-Java/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/2016/01/18/regular-expression-Java/</guid>
        
        
      </item>
    
      <item>
        <title>Javascript Basics=steganography</title>
        <description>
</description>
        <pubDate>Sun, 03 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/2016/01/03/javascript-basics=steganography/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/2016/01/03/javascript-basics=steganography/</guid>
        
        
      </item>
    
      <item>
        <title>Javascript basics - How to build a steganography</title>
        <description>&lt;p&gt;The following code is for building a steganography. It connects to a project that I built for my E portfolio, which is a final projects of a Coursera course &lt;a href=&quot;https://www.coursera.org/learn/duke-programming-web/home/welcome&quot;&gt;Programming and the Web for Beginners&lt;/a&gt;that I am taking. 
&lt;!--break--&gt;
The logic behinds this program is very simple, simply manipulating the values of pixels of the images of interest.
To see a full introduction of the code please visit my &lt;a href=&quot;http://codepen.io/JizongL/pen/mVRXop&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding:5px;&quot;&gt;
&lt;pre&gt;
&lt;code&gt;
// steganography


// function for computing bit
function bitToUse(bit){
    result = Math.pow(2,bit);
    return result;
}


// function for cropping the an image 
function crop(image,width,height)
{ var output= new SimpleImage(width,height);
  for(var outpx of output.values())
  { var x=outpx.getX();
    var y=outpx.getY();
    var px= image.getPixel(x,y);
    outpx.setRed(px.getRed());
    outpx.setGreen(px.getGreen());
    outpx.setBlue(px.getBlue());
  }
  return output;
}


// Helper function for &quot;chop2hide&quot; for to eliminate the last 4 bits of every pixel
function pixchange(pixval,bit){
    var x = Math.floor(pixval/bit) * bit;
    return x;
}
// function to convert an image to be ready for hiding information in it. 
function chop2hide(image,bit){
    bit = bitToUse(bit);
    for(var px of image.values()){
        px.setRed(pixchange(px.getRed(),bit));
        px.setGreen(pixchange(px.getGreen(),bit));
        px.setBlue(pixchange(px.getBlue(),bit));
    }
    return image;
}

// function for shifting the pixel of the hide image to have only 4 bits.
function shift(im,bit){
    bit=bitToUse(bit);
  var nim = new SimpleImage(im.getWidth(), 
                            im.getHeight());
  for(var px of im.values()){
    var x = px.getX();
    var y = px.getY();
    var npx = nim.getPixel(x,y);
    npx.setRed(Math.floor(px.getRed()/bit));
    npx.setGreen(Math.floor(px.getGreen()/bit));
    npx.setBlue(Math.floor(px.getBlue()/bit));
  }
  return nim;
}

// combine function for adding the start and hide images together. 
function combine(start,hide){
var combinedImage = new SimpleImage(start.getWidth(),start.getHeight());
for(var cPixel of combinedImage.values()){
    x =cPixel.getX();
    y = cPixel.getY();
    sPixel = start.getPixel(x,y); // pixel on start corresponding to pp
    hPixel = hide.getPixel(x,y); // pixel on hide corresponding to pp
    cPixel.setRed(sPixel.getRed()+hPixel.getRed())
    cPixel.setBlue(sPixel.getBlue()+hPixel.getBlue())
    cPixel.setGreen(sPixel.getGreen()+hPixel.getGreen())
    }
return combinedImage
}

// function for decoding the combined image
function decode(im,bit){
    bit = bitToUse(bit);
    var nim = new SimpleImage(im.getWidth(),
                              im.getHeight());
        for(var px of im.values()){
            var x = px.getX();
            var y = px.getY();
            var npx = nim.getPixel(x,y);
            npx.setRed(bit*(px.getRed()-(bit*Math.floor(px.getRed()/bit)))); // follow the math;
            // original pixel from combined say 133, let 133/16 and round the result to no deximal
            npx.setGreen(bit*(px.getGreen()-(bit*Math.floor(px.getGreen()/bit))));
            npx.setBlue(bit*(px.getBlue()-(bit*Math.floor(px.getBlue()/bit))));
            
        }
return nim;
}


var ShowImage= new SimpleImage(&quot;vanGohCrop.png&quot;);
var HideImage= new SimpleImage(&quot;qrCode.jpg&quot;);

var crw=Math.min(ShowImage.getWidth(),HideImage.getWidth());
var crh=Math.min(ShowImage.getHeight(),HideImage.getHeight());

var crSImg= crop(ShowImage,crw,crh);
var crHImg= crop(HideImage,crw,crh);

var bit = 6

start = chop2hide(crSImg,bit);
hide = shift(crHImg,bit);

combined = combine(start,hide);
decoded = decode(combined,bit)

//print(start)
//print(hide)
print(&#39;ShowImage before processing&#39;)
print(ShowImage)
print(&#39;HideImage before processing&#39;)
print(HideImage)
print(&#39;the Show and Hide images are combined, the Hide image is hidden&#39;)
print(combined)
print(&#39;decode the Steganography&#39;)
print(decoded)


&lt;/code&gt;

&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/javascript/2016/01/03/javascript-basics-steganography/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/javascript/2016/01/03/javascript-basics-steganography/</guid>
        
        <category>javascript</category>
        
        <category>steganography</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Javascript basics</title>
        <description>&lt;p&gt;You can open the home page of the &lt;a href=&quot;http://dukelearntoprogram.com/course1/&quot;&gt;JavaScript Programming Environment&lt;/a&gt; by Duke university to test the code in my note.&lt;/p&gt;

&lt;!--break--&gt;

&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding:5px;&quot;&gt;
&lt;pre&gt;
&lt;code&gt;
var image = new SimpleImage(200,200);
w = image.getWidth();
for (var pixel of image.values()) {
        pixel.setRed(255);
        pixel.setGreen(0);
        pixel.setBlue(0);
        x = pixel.getX();
        y = pixel.getY();
        
    if ( x &amp;gt;=w/2 &amp;amp;&amp;amp; y &amp;lt;= w/2)  {
        pixel.setGreen(255);
        pixel.setRed(0);       
        }
    if ( x&amp;lt; w/2 &amp;amp;&amp;amp; y &amp;gt; w/2 ){
        pixel.setRed(255);
        pixel.setBlue(255);
    }
    if(x&amp;gt;=w/2 &amp;amp;&amp;amp; y&amp;gt;=w/2){
        pixel.setBlue(255);
        pixel.setRed(0);
    }
    
    
}
    
print(image);

&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding:5px;&quot;&gt;
&lt;pre&gt;
&lt;code&gt;
var image = new SimpleImage(200,200);

for (var pixel of image.values()) {
     x = pixel.getX();
     y = pixel.getY();
 if(x &amp;gt; y){
       pixel.setRed(255);
   }    
     if (x + y &amp;lt; 200) {
          pixel.setRed(255);
     }
}
 print(image)
 
var image = new SimpleImage(200,200);
for (var pixel of image.values()){
     x = pixel.getX();
     y = pixel.getY();
   if(x &amp;gt; y){
       pixel.setRed(255);
   }
   if (x+y &amp;gt; 200) {
       pixel.setRed(255);
   }
   } 


print(image)
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;fgImage
bgImage
output&lt;/p&gt;

&lt;p&gt;for (var pixel of fgImage.values()) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(pixel.getGreen == 255){
	var x = pixel.getX
	var y = pixel.getY
	var bgPixel = bgImage.getPixel(x,y);
	output.setPixel(x,y, bgPixel);
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;else{
	output.setPixel(x,y,pixel)&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;h2 id=&quot;function-exercise&quot;&gt;function exercise&lt;/h2&gt;

&lt;p&gt;Write a JavaScript program that has a function named swapRedGreen with one parameter pixel. This function should swap the red and green values of the pixel. Pick an image, print the image, then apply swapRedGreen to every pixel in the image, and print the new image. The choice of your image is important. For some images you may not notice any change. Think about what type of image you should use for testing your function.&lt;/p&gt;

&lt;p&gt;I created a “swapRedGreen” function as instructed and then 
I created a “createImage”function that would produce a square image of any size with 2 colors.
I applied the swapRedGreen inside the “createImage” function to test if it would swap the color correctly.&lt;/p&gt;

&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
// swapRedGreen function 
function swapRedGreen(pixel){
    var red = pixel.getRed();
    var green = pixel.getGreen();
    pixel.setGreen(red)
    pixel.setRed(green)
    return pixel;
}

// function for creating a flexible test image
function createImage(L,W,R,G,B){
var image = new SimpleImage(L,W);

for (var p of image.values()) {
    var x = p.getX();
var y = p.getY();
    if (x &amp;lt; image.getWidth()/2) { // remember the getWidth() must be set to image, not p. 
        p.setGreen(G)
    }
    else {
p.setRed(R)
p.setBlue(B)
        
    }
}
print(image);
for(var pixel of image.values()){
swapRedGreen(pixel)}
print(image)
}

createImage(300,300,255,255,0) // create a 300 by 300 image with half red and half green

    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then I applied the “swapRedGreen” function to an image and test if it works.&lt;/p&gt;
&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
function swapRedGreen(pixel){
    var red = pixel.getRed();
    var green = pixel.getGreen();
    pixel.setGreen(red)
    pixel.setRed(green)
    return pixel;
}

var image = new SimpleImage(&quot;lion.jpg&quot;);
for(var pixel of image.values()){
swapRedGreen(pixel)}

print(image)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2: Write a JavaScript program to make an image have more red in it, by adding a given value to the red, making sure it doesn’t go over 255. Your program should have a function called moreRed with two parameters, a pixel and a value to increase the red by. Run your program on an image to see it get redder.&lt;/p&gt;

&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;  
function moreRed(pixel,addedRed){   // create a &quot;moreRed&quot; function 
    var red = pixel.getRed();
    if (red &amp;lt; 255){ pixel.setRed(red+addedRed)
    } 
    else if (red+addedRed == 255){        // make sure that the addedRed value does not go over 255. 
        pixel.setRed(255)
    }
}

var image = new SimpleImage(&quot;lion.jpg&quot;);// load an image
for (var pixel of image.values()){        // apply the moreRed function
    moreRed(pixel,266)}
print(image)
    &lt;/code&gt;
  &lt;/pre&gt;  
&lt;/div&gt;

&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;  

// border frame using a function, refactored
function setBlack(pixel){
    pixel.setRed(0);
    pixel.setGreen(0);
    pixel.setBlue(0);
    return pixel;
}
function pixelOnEdge(pixel,image,borderWidth){
    var x = pixel.getX();
    var y = pixel.getY();
    if (x &amp;lt; borderWidth) return true;
    if (y &amp;lt; borderWidth) return true;
    if (x &amp;gt;= image.getWidth() - borderWidth) return true;
    if (y &amp;gt;= image.getHeight() - borderWidth) return true;
    return false;
}
var image = new SimpleImage(&quot;lion.jpg&quot;);
for (var pixel of image.values()) {
   if (pixelOnEdge(pixel,image,10)){
       pixel = setBlack(pixel);
   }
}
print(image);

    &lt;/code&gt;
  &lt;/pre&gt;  
&lt;/div&gt;

&lt;p&gt;Based on the above code with a little refinement, I can now set the thickness of the borders separately 
for either the Horizontal and Vertical borders.&lt;/p&gt;

&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;  
// border frame using a function, refactored
function setBlack(pixel){
    pixel.setRed(0);
    pixel.setGreen(0);
    pixel.setBlue(0);
    return pixel;
}
function pixelOnEdgeDifferentThickness(pixel,image,HorWidth,VerWidth){
    var x = pixel.getX();
    var y = pixel.getY();
    if (x &amp;lt; HorWidth) return true;
    if (y &amp;lt; VerWidth) return true;
    if (x &amp;gt;= image.getWidth() - HorWidth) return true;
    if (y &amp;gt;= image.getHeight() - VerWidth) return true;
    return false;
}
var image = new SimpleImage(&quot;lion.jpg&quot;);
for (var pixel of image.values()) {
   if (pixelOnEdgeDifferentThickness(pixel,image,1,30)){
       pixel = setBlack(pixel);
   }
}
print(image);
    &lt;/code&gt;
  &lt;/pre&gt;  
&lt;/div&gt;

&lt;p&gt;Steganography&lt;/p&gt;

&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;  


// steganography


// function for computing bit
function bitToUse(bit){
    result = Math.pow(2,bit);
    return result;
}


// function for cropping the an image 
function crop(image,width,height)
{ var output= new SimpleImage(width,height);
  for(var outpx of output.values())
  { var x=outpx.getX();
    var y=outpx.getY();
    var px= image.getPixel(x,y);
    outpx.setRed(px.getRed());
    outpx.setGreen(px.getGreen());
    outpx.setBlue(px.getBlue());
  }
  return output;
}


// Helper function for &quot;chop2hide&quot; for to eliminate the last 4 bits of every pixel
function pixchange(pixval,bit){
    var x = Math.floor(pixval/bit) * bit;
    return x;
}
// function to convert an image to be ready for hiding information in it. 
function chop2hide(image,bit){
    bit = bitToUse(bit);
    for(var px of image.values()){
        px.setRed(pixchange(px.getRed(),bit));
        px.setGreen(pixchange(px.getGreen(),bit));
        px.setBlue(pixchange(px.getBlue(),bit));
    }
    return image;
}

// function for shifting the pixel of the hide image to have only 4 bits.
function shift(im,bit){
    bit=bitToUse(bit);
  var nim = new SimpleImage(im.getWidth(), 
                            im.getHeight());
  for(var px of im.values()){
    var x = px.getX();
    var y = px.getY();
    var npx = nim.getPixel(x,y);
    npx.setRed(Math.floor(px.getRed()/bit));
    npx.setGreen(Math.floor(px.getGreen()/bit));
    npx.setBlue(Math.floor(px.getBlue()/bit));
  }
  return nim;
}

// combine function for adding the start and hide images together. 
function combine(start,hide){
var combinedImage = new SimpleImage(start.getWidth(),start.getHeight());
for(var cPixel of combinedImage.values()){
    x =cPixel.getX();
    y = cPixel.getY();
    sPixel = start.getPixel(x,y); // pixel on start corresponding to pp
    hPixel = hide.getPixel(x,y); // pixel on hide corresponding to pp
    cPixel.setRed(sPixel.getRed()+hPixel.getRed())
    cPixel.setBlue(sPixel.getBlue()+hPixel.getBlue())
    cPixel.setGreen(sPixel.getGreen()+hPixel.getGreen())
    }
return combinedImage
}

// function for decoding the combined image
function decode(im,bit){
    bit = bitToUse(bit);
    var nim = new SimpleImage(im.getWidth(),
                              im.getHeight());
        for(var px of im.values()){
            var x = px.getX();
            var y = px.getY();
            var npx = nim.getPixel(x,y);
            npx.setRed(bit*(px.getRed()-(bit*Math.floor(px.getRed()/bit)))); // follow the math;
            // original pixel from combined say 133, let 133/16 and round the result to no deximal
            npx.setGreen(bit*(px.getGreen()-(bit*Math.floor(px.getGreen()/bit))));
            npx.setBlue(bit*(px.getBlue()-(bit*Math.floor(px.getBlue()/bit))));
            
        }
return nim;
}


var ShowImage= new SimpleImage(&quot;astrachan.jpg&quot;);
var HideImage= new SimpleImage(&quot;MessageCSEveryone.jpg&quot;);

var crw=Math.min(ShowImage.getWidth(),HideImage.getWidth());
var crh=Math.min(ShowImage.getHeight(),HideImage.getHeight());

var crSImg= crop(ShowImage,crw,crh);
var crHImg= crop(HideImage,crw,crh);

var bit = 4

start = chop2hide(crSImg,bit);
hide = shift(crHImg,bit);

combined = combine(start,hide);
decoded = decode(combined,bit)

//print(start)
//print(hide)
print(&#39;ShowImage before processing&#39;)
print(ShowImage)
print(&#39;HideImage before processing&#39;)
print(HideImage)
print(&#39;the Show and Hide images are combined, the Hide image is hidden&#39;)
print(combined)
print(&#39;decode the Steganography&#39;)
print(decoded)





    &lt;/code&gt;
  &lt;/pre&gt;  
&lt;/div&gt;

&lt;h2 id=&quot;creating-a-duplicate-function&quot;&gt;creating a duplicate function&lt;/h2&gt;
&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;  

function duplicate(image){

var outputImage = new SimpleImage(image.getWidth() * 2, image.getHeight() * 2);

for (var pixel of outputImage.values()){

var outputX = pixel.getX();

var outputY = pixel.getY();

if(outputX &amp;gt;= image.getWidth()){

outputX = outputX - image.getWidth();

}

if(outputY &amp;gt;= image.getHeight()){

outputY = outputY - image.getHeight();

}

if(outputX &amp;gt;= image.getWidth() &amp;amp;&amp;amp; outputY &amp;gt; image.getHeight()){

outputX = outputX - image.getWidth();

outputY = outputY - image.getHeight();

}

var inputPixel = image.getPixel(outputX, outputY);

pixel.setRed(inputPixel.getRed());

pixel.setGreen(inputPixel.getGreen());

pixel.setBlue(inputPixel.getBlue());

}

return outputImage;

}

var image = new SimpleImage(&quot;chapel.png&quot;);

image = duplicate(image);

print(image);

    &lt;/code&gt;
  &lt;/pre&gt;  
&lt;/div&gt;

&lt;h2 id=&quot;create-an-image-from-scratch&quot;&gt;create an image from scratch&lt;/h2&gt;
&lt;p&gt;In this example, we are going to create an image that looks like two planets in space, using mathematical functions.&lt;/p&gt;
&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;  
 function dist(pixel, x,y) {
     var dx = pixel.getX() - x;  // x and y are the center of the circle to be created.
     var dy = pixel.getY() - y;
     return Math.sqrt(dx * dx + dy *dy);
 }
 //start with a blank image
 var output = new SimpleImage(4,4);
 
 //Make something here!
 for (var pixel of output.values()){
     //print(pixel.getX());
     var dx = pixel.getX() - 2;
     var dy = pixel.getY() - 2;
     print(dx)
     print(dy)
     print(Math.sqrt(dx * dx + dy *dy));
     
     if (dist(pixel, 2,2)&amp;lt; 2){
            pixel.setRed(255-5*dist(pixel,2,2));
     }
     
 }
 print(output);
     &lt;/code&gt;
  &lt;/pre&gt;  
&lt;/div&gt;

&lt;p&gt;modifying an image&lt;/p&gt;
&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt; 
// blur by moving random pixels

function combine(start,hide){
var combinedImage = new SimpleImage(start.getWidth(),start.getHeight());
for(var cPixel of combinedImage.values()){
    x =cPixel.getX();
    y = cPixel.getY();
    sPixel = start.getPixel(x,y); // pixel on start corresponding to pp
    hPixel = hide.getPixel(x,y); // pixel on hide corresponding to pp
    cPixel.setRed(sPixel.getRed()+hPixel.getRed())
    cPixel.setBlue(sPixel.getBlue()+hPixel.getBlue())
    cPixel.setGreen(sPixel.getGreen()+hPixel.getGreen())
    }
return combinedImage
}

function ensureInImage (coordinate, size) {
    // coordinate cannot be negative
    if (coordinate &amp;lt; 0) {
        return 0;
    }
    // coordinate must be in range [0 .. size-1]
    if (coordinate &amp;gt;= size) {
        return size - 1;
    }
    return coordinate;
}

function getPixelNearby (image, x, y, diameter) {
    var dx = Math.random() * diameter - diameter / 2;
    var dy = Math.random() * diameter - diameter / 2;
    var nx = ensureInImage(x + dx, image.getWidth());
    var ny = ensureInImage(y + dy, image.getHeight());
    return image.getPixel(nx, ny);
}


var image = new SimpleImage(&quot;beautiful-autumn-scenery-6341-706.jpg&quot;);
var image2 = new SimpleImage(&quot;beautiful-autumn-scenery-6341-706.jpg&quot;);
for (var p of image.values()) {
    var avg = (p.getGreen() + p.getRed() + p.getBlue()) / 3;
    //var avg = 0.3 * p.getRed() + 0.59 * p.getGreen() + 0.11 * p.getBlue();
    p.setRed(avg);
    p.setBlue(avg);
    p.setGreen(avg);
   
}

var output = new SimpleImage(image.getWidth(), image.getHeight());

for (var pixel of image.values()) {
    var x = pixel.getX();
    var y = pixel.getY();
    if (Math.random() &amp;gt; 0.5) {
        var other = getPixelNearby(image, x, y, 10);
        output.setPixel(x, y, other);
    }
    else {
        output.setPixel(x, y, pixel);
    }
}

combined = combine(image2,output);

print(output);
print(combined);
     &lt;/code&gt;
  &lt;/pre&gt;  
&lt;/div&gt;

&lt;p&gt;In this problem we want to create an image that is a copy of the original image, but is twice as wide and twice as high. We begin by creating the new blank image with the new dimensions. Then we need to set the red, green, and blue values of each of the new pixels so that the overall image of the new picture is the same as the original picture.&lt;/p&gt;

&lt;p&gt;Consider, for example, enlarging a picture with dimensions 100 by 100 pixels. The new picture will be 200 by 200 pixels. What about the pixel at point (0,100) in the new picture? That pixel is on the leftmost edge, halfway down. Its corresponding pixel in the old picture is also on the leftmost edge, halfway down. In the original 100 by 100 picture that point would be (0, 50). Further examples confirm this pattern, that to find the corresponding pixel in the original image we divide both the x and y values by 2.&lt;/p&gt;

&lt;div style=&quot;width:700px;height:500px;line-height:3em;overflow:auto;padding;5px&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt; 

function duplicate(image){

var outputImage = new SimpleImage(image.getWidth() * 2, image.getHeight() * 2);

for (var pixel of outputImage.values()){

var outputX = pixel.getX();

var outputY = pixel.getY();

if(outputX &amp;gt;= image.getWidth()){

outputX = outputX - image.getWidth();

}

if(outputY &amp;gt;= image.getHeight()){

outputY = outputY - image.getHeight();

}

if(outputX &amp;gt;= image.getWidth() &amp;amp;&amp;amp; outputY &amp;gt; image.getHeight()){

outputX = outputX - image.getWidth();

outputY = outputY - image.getHeight();

}

var inputPixel = image.getPixel(outputX, outputY);

pixel.setRed(inputPixel.getRed());

pixel.setGreen(inputPixel.getGreen());

pixel.setBlue(inputPixel.getBlue());

}

return outputImage;

}

var image = new SimpleImage(&quot;chapel.png&quot;);

image = duplicate(image);

print(image);
    &lt;/code&gt;
  &lt;/pre&gt;  
&lt;/div&gt;
</description>
        <pubDate>Thu, 24 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/javascript/2015/12/24/javascript-basics/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/javascript/2015/12/24/javascript-basics/</guid>
        
        <category>javascript</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>ellipse and scatter plot</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://onlinelibrary.wiley.com/store/10.1002/9780470750711.app1/asset/app1.pdf;jsessionid=3A2DE2804CD8C8119197F67F47DDCA4C.f01t01?v=1&amp;amp;t=iikpr60j&amp;amp;s=f9c64f839ce4d43efb8aa1f24ffd41a2d31b4f7a&quot;&gt;confidence ellipse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mathopenref.com/ellipseeccentricity.html&quot;&gt;Eccentricity an Ellipse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.visiondummy.com/2014/04/draw-error-ellipse-representing-covariance-matrix/&quot;&gt;How to draw a covariance error ellipse?&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/geometry/2015/12/24/ellipse-and-scatterplot/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/geometry/2015/12/24/ellipse-and-scatterplot/</guid>
        
        <category>ellipse</category>
        
        <category>eccentricity</category>
        
        <category>differential equation</category>
        
        <category>mathlab</category>
        
        
        <category>geometry</category>
        
      </item>
    
      <item>
        <title>Dynamic modeling</title>
        <description>&lt;p&gt;copy paste the original source from the signalling website&lt;/p&gt;

&lt;p&gt;mathlab code(explain every line)&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/biology/2015/12/24/dynamic-modeling/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/biology/2015/12/24/dynamic-modeling/</guid>
        
        <category>biology</category>
        
        <category>statistics</category>
        
        <category>differential equation</category>
        
        <category>mathlab</category>
        
        
        <category>biology</category>
        
      </item>
    
      <item>
        <title>How to time my R code</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.ats.ucla.edu/stat/r/faq/timing_code.htm&quot;&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;x &amp;lt;- c(0.18, -1.54, 0.42, 0.95)
w &amp;lt;- c(2, 1, 3, 1)
l = c(.147,.0025,.3,1.077)&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;ptm &amp;lt;- proc.time()
for (i in c(
        .147,
        .0025,
        .3,
        1.077)
){print(min(sum(w*(x-i)^2)))}
proc.time() - ptm&lt;/p&gt;

&lt;p&gt;user  system elapsed 
0.002   0.001   0.004&lt;/p&gt;

&lt;p&gt;ptm &amp;lt;- proc.time()
sapply(l,function(l) sum(w*(x-l)^2))
proc.time() - ptm&lt;/p&gt;

&lt;p&gt;user  system elapsed 
0.000   0.001   0.002&lt;/p&gt;

</description>
        <pubDate>Sun, 13 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/r/2015/12/13/timing-my-code/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/r/2015/12/13/timing-my-code/</guid>
        
        <category>R</category>
        
        <category>system time</category>
        
        
        <category>r</category>
        
      </item>
    
      <item>
        <title>Google Map Api 2</title>
        <description>&lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;getElementById example&lt;/title&gt;
  &lt;script&gt;
  function changeColor(newColor) {
    var elem = document.getElementById(&quot;para1&quot;);
    elem.style.color = newColor;
  }

function changeFont(newFont){
	var elem2 = document.getElementById(&quot;dar&quot;);
	elem2.style.fontsize = newFont;
}

  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;p id=&quot;para1&quot;&gt;Some text here&lt;/p&gt;
  &lt;button onclick=&quot;changeColor(&#39;blue&#39;);&quot;&gt;blue&lt;/button&gt;
  &lt;button onclick=&quot;changeColor(&#39;red&#39;);&quot;&gt;red&lt;/button&gt;

&lt;p id=&quot;dar&quot;&gt;some more text here&lt;/p&gt;
  &lt;button onclick=&quot;changeFont(&#39;10&#39;);&quot;&gt;10&lt;/button&gt;
  &lt;button onclick=&quot;changeFont(&#39;5&#39;);&quot;&gt;5&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
        <pubDate>Mon, 07 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/2015/12/07/google-map-api-2/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/2015/12/07/google-map-api-2/</guid>
        
        
      </item>
    
      <item>
        <title>Google Map Api</title>
        <description> &lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src=&quot;http://maps.googleapis.com/maps/api/js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
function initialize() {
  var mapProp = {
    center:new google.maps.LatLng(32.273202,-89.985916),
    zoom:5,
    mapTypeId:google.maps.MapTypeId.ROADMAP
  };
  var map=new google.maps.Map(document.getElementById(&quot;googleMap&quot;),mapProp);
}
google.maps.event.addDomListener(window, &#39;load&#39;, initialize);
function loadScript() {
  var script = document.createElement(&quot;script&quot;);
  script.src = &quot;http://maps.googleapis.com/maps/api/js?callback=initialize&quot;;
  document.body.appendChild(script);
}

window.onload = loadScript; 
&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;div id=&quot;googleMap&quot; style=&quot;width:500px;height:380px;&quot;&gt;&lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt; </description>
        <pubDate>Mon, 07 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://lanyon.getpoole.com/2015/12/07/google-map-api/</link>
        <guid isPermaLink="true">http://lanyon.getpoole.com/2015/12/07/google-map-api/</guid>
        
        
      </item>
    
  </channel>
</rss>
