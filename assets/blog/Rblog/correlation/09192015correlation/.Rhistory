```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = TRUE, tidy = TRUE}
data=read.csv("./data/gapminder.csv")
data1 <- na.omit(data)
names(data1)
```
## setting a correlation matrix
```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = FALSE, tidy = TRUE}
d_cor <- as.matrix(cor(data1))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
cor(data2)
cor(data1)
str(data1)
str(data2)
data2
head(data2)
data2 <- data[!is.na(data)]
str(data2)
data1 <- na.omit(data)
str(data1)
data1[,-1]
data2 <- data1[,-1]
cor(data2)
as.matrix(cor(data2))
data1 <- na.omit(data)
names(data1)
data2 <- data1[,-1]
d_cor <- as.matrix(cor(data2))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
library(dplyr)
require(dplyr)
require(dplyr)
names(data1)
library(dplyr)
data2 <- data1[,-1]
d_cor <- as.matrix(cor(data2))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = FALSE, tidy = TRUE}
install.packages("dplyr")
install.packages("dplyr")
attach(data2)
attach(data2)
attach(data1)
attach(data)
data=read.csv("./data/gapminder.csv")
data1 <- na.omit(data)
names(data1)
attach(data1)
names(data1)
cor(POLITYSCORE,urbanrate)
polityscore
cor(polityscore,urbanrate)
download.file(fileUrl,destfile="./data/gapminder.csv",method="curl")
data=read.csv("./data/gapminder.csv")
data1 <- na.omit(data)
names(data1)
names(data)
data=read.csv("gapminder.csv")
names(data)
if(!file.exists("data")){
dir.create("data")
}
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
download.file(fileUrl,destfile="./data/gapminder.csv",method="curl")
```
```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = TRUE, tidy = TRUE}
data=read.csv("./data/gapminder.csv")
data1 <- na.omit(data)
names(data1)
names(data1)
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
download.file(fileUrl,destfile="./data/gapminder.csv",method="curl")
```
```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = TRUE, tidy = TRUE}
data=read.csv("./data/gapminder.csv")
data1 <- na.omit(data)
(names(data1))
attach(data1)
library(reshape)
data2 <- data1[,-1]
d_cor <- as.matrix(cor(data2))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
```
## testing accuracy by correlating two specific indicators
```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = FALSE, tidy = TRUE}
cor(polityscore,urbanrate)
cor(data2$POLITYSCORE,data2$urbanrate)
cor(polityscore,urbanrate)
data=read.csv("gapminder.csv")
names(data)
if(!file.exists("data")){
dir.create("data")
}
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
download.file(fileUrl,destfile="./data/gapminder.csv",method="curl")
data=read.csv("./data/gapminder.csv")
data1 <- na.omit(data)
(names(data1))
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
download.file(fileUrl,destfile="./data/gapminder.csv",method="curl")
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
download.file(fileUrl,destfile="./data/gapminder.csv",method="curl")
data=read.csv("./data/gapminder.csv")
data1 <- na.omit(data)
(names(data1))
attach(data1)
library(reshape)
data2 <- data1[,-1]
d_cor <- as.matrix(cor(data2))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
cor(data2$polityscore,data2$urbanrate)
cor(polityscore,urbanrate)
cor(data2$polityscore,data2$urbanrate)
data2$polityscore
cor(data2$polityscore,data2$urbanrate)
attach(data2)
cor(polityscore,urbanrate)
name(data2)
name(data2)
library(reshape)
data2 <- data1[,-1]
d_cor <- as.matrix(cor(data2))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
```
## testing accuracy by correlating two specific indicators
```{r, cache = TRUE, echo = TRUE, message = FALSE, warning = FALSE, tidy = TRUE}
name(data2)
names(data2)
cor(polityscore,urbanrate)
class(data2$polityscore)
length(data2$polityscore)
length(data2$urbanrate)
if(!file.exists("data")){
dir.create("data")
}
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
download.file(fileUrl,destfile="./data/gapminder.csv",method="curl")
data=read.csv("./data/gapminder.csv")
data1 <- na.omit(data)
(names(data1))
names(data1)
names(data)
library(reshape)
data2 <- data1[,-1]
d_cor <- as.matrix(cor(data2))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
index=which(grepl("polityscore", d_cor_melt$X1))
index2= which(grepl("urbanrate",d_cor_melt$X2))
index
index
index2
targetrow <- intersect(index,index2)
```
## locate the target
```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = TRUE, tidy = TRUE}
d_cor_melt[targetrow,]
index;index2
targetrow <- intersect(index,index2)
class(data2$polityscore)
targetrow
targetrow <- intersect(index,index2)
targetrow
index
index2
House keeping
```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = TRUE, tidy = TRUE}
if(!file.exists("data")){
dir.create("data")
}
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
download.file(fileUrl,destfile="./data/gapminder.csv",method="curl")
```
```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = TRUE, tidy = TRUE}
data=read.csv("./data/gapminder.csv")
data1 <- na.omit(data)
names(data1)
```
## setting a correlation matrix,remove the country because it is a factor
```{r, cache = TRUE, echo = TRUE, message = TRUE, warning = FALSE, tidy = TRUE}
library(reshape)
data2 <- data1[,-1]
d_cor <- as.matrix(cor(data2))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
```
## looking for a specific values from columns and build index
```{r, echo=TRUE, eval=TRUE}
index=which(grepl("polityscore", d_cor_melt$X1))
index2= which(grepl("urbanrate",d_cor_melt$X2))
index
index2
```
## find common elements by intersect()
```{r}
targetrow <- intersect(index,index2)
targetrow
```
## locate the target
```{r}
d_cor_melt[targetrow,]
```
setwd("~/Documents/One Drive/OneDrive/Coursera/Data Management and Visualization/data")
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
download.file(fileUrl,destfile="./gapminder.csv",method="curl")
fileUrl <- "https://raw.githubusercontent.com/JizongL/jizongL.github.io/master/assets/blog/Rblog/correlation/09192015correlation/gapminder.csv"
download.file(fileUrl,destfile="./gapminder.csv",method="curl")
data=read.csv("./gapminder.csv")
data1 <- na.omit(data)
names(data1)
library(reshape)
data2 <- data1[,-1]
name(data2)
names(data2)
d_cor <- as.matrix(cor(data2))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
d_cor_melt
index=which(grepl("polityscore", d_cor_melt$X1))
index2= which(grepl("urbanrate",d_cor_melt$X2))
index
index2
which(d_cor_melt[d_cor_melt$value>=0.5])
(d_cor_melt[d_cor_melt$value>=0.5])
(d_cor_melt[d_cor_melt$value>=0.5,])
(d_cor_melt[d_cor_melt$value>=0.5 & d_cor_melt$value<1,])
setwd("~/jizongL.github.io/assets/blog/Rblog/correlation/09192015correlation")
KnitPost <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
KnitPost("filename.rmd")
KnitPost <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
KnitPost("CorrelationMatrix.Rmd")
names(data)
corrplot.mixed(cor(data2))
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
1.612/1.071
packsize <- c(9,8,10,6,13,10,6,15,18,17)
homerange <- c(25,20,28,36,22,46,52,41,59,59)
plot(y = homerange , x = packsize , xlab ="Pack Size (adults)",ylab = "Home Range (km2)",
col = 'red', pch = 19 ,cex = 2.5,cex.axis = 1.3, cex.lab = 1.3 )
plot(y = homerange , x = packsize , xlab ="Pack Size (adults)",ylab = "Home Range (km2)",
col = 'red', pch = 19 ,cex = 2.5,cex.axis = 1, cex.lab = 1 )
plot(y = homerange , x = packsize , xlab ="Pack Size (adults)",ylab = "Home Range (km2)",
col = 'red', pch = 19 ,cex = 2.5,cex.axis = 1, cex.lab = 1 )
plot(y = homerange , x = packsize , xlab ="Pack Size (adults)",ylab = "Home Range (km2)",
col = 'red', pch = 19 ,cex = 1,cex.axis = 1, cex.lab = 1 )
plot(y = homerange, x = packsize, xlab = "Pack Size (adults)", ylab = "Home Range (km2)",
col = 'red', pch = 19, cex = 2.5, cex.axis = 1.3, cex.lab = 1.3)
par()
#pack size as number of adults
mod1 <- lm(homerange ~ packsize)
mod1 <- lm(homerange ~ packsize)
mod1
summary(mod1)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) – beta1 * mean(x)
beta0 <- mean(y) – beta1 * mean(x)
beta0 <- mean(y) - beta1*mean(x)
e <- y - beta0 - beta1 * x #y – (beta1*x + beta0)
sigma <- sqrt(sum(e^2) / (n-2))
sigma
ssx <- sum((x - mean(x))^2)
ssx
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
seBeta1
seBeta0
tBeta0 <- beta0 / seBeta0
tBeta1 <- beta1 / seBeta1
tBeta0
x <- c(9,8,10,6,13,10,6,15,18,17)
y <- c(25,20,28,36,22,46,52,41,59,59)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1*mean(x)
e <- y - beta0 - beta1 * x #y – (beta1*x + beta0)
sigma <- sqrt(sum(e^2) / (n-2))
sigma
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
seBeta1
seBeta0
tBeta0 <- beta0 / seBeta0
tBeta1 <- beta1 / seBeta1
tBeta0
tBeta1
x <- c(9,8,10,6,13,10,6,15,18,17)
y <- c(25,20,28,36,22,46,52,41,59,59)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1*mean(x)
beta1
e <- y - beta0 - beta1 * x #y – (beta1*x + beta0)
sigma <- sqrt(sum(e^2) / (n-2))
sigma
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
seBeta1
sigma
e <- y - beta0 - beta1 * x #y – (beta1*x + beta0)
e
sigma <- sqrt(sum(e^2) / (n-2))
sigma
e^2
sum(e^2)
n= length(x)
n
n= length(y)
n
sigma <- sqrt(sum(e^2) / (n-2))
sigma
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
seBeta1
seBeta0
tBeta0 <- beta0 / seBeta0
tBeta1 <- beta1 / seBeta1
tBeta0
tBeta1
qt(97.5,8)
qt(0.975,8)
pt(1.505,8)
qt(1.505,8)
dt(1.505,8)
pBeta0 <- 2 * pt(abs(tBeta0), df = n – 2, lower.tail = FALSE)
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
pBeta1
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = TRUE)
pBeta1
?PT
?pt
summary(mod1)
cor(x,y)
data1 <- data.frame(packsize,homerange)
data1 <- data.frame(packsize,homerange)
g <- ggplot(data1, aes(x = packsize, y = homerange))
g <- g + geom_point(colour = "red", size = 6)
g <- g + geom_smooth(method = lm)
g <- g + ylab("Home Range (km2)")
g <- g + xlab("Pack Size (adults)")
g
data2 <- data.frame(packsize,homerange)
g <- ggplot(data1, aes(x = packsize, y = homerange))
g <- g + geom_point(colour = "red", size = 6)
g <- g + geom_smooth(method = lm, level = 0.9)
g <- g + ylab("Home Range (km2)")
g <- g + xlab("Pack Size (adults)")
g
data1 <- data.frame(packsize,homerange)
g <- ggplot(data1, aes(x = packsize, y = homerange))
g <- g + geom_point(colour = "red", size = 6)
g <- g + geom_smooth(method = lm, level = 0.9)
g <- g + ylab("Home Range (km2)")
g <- g + xlab("Pack Size (adults)")
g
g <- ggplot(data1, aes(x = packsize, y = homerange))
g <- g + geom_point(colour = "red", size = 6)
g <- g + geom_smooth(method = lm)
g <- g + ylab("Home Range (km2)")
g <- g + xlab("Pack Size (adults)")
g
data1 <- data.frame(packsize,homerange)
g <- ggplot(data1, aes(x = packsize, y = homerange))
g <- g + geom_point(colour = "red", size = 6)
g <- g + geom_smooth(method = lm, level = 0.9)
g <- g + ylab("Home Range (km2)")
g <- g + xlab("Pack Size (adults)")
g
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
points(diamond$carat, predict(fit), pch = 19, col = "red")
lines(c(0.16, 0.16, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.16,
coef(fit)[1] + coef(fit)[2] * 0.16))
lines(c(0.27, 0.27, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.27,
coef(fit)[1] + coef(fit)[2] * 0.27))
lines(c(0.34, 0.34, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.34,
coef(fit)[1] + coef(fit)[2] * 0.34))
text(newx, rep(250, 3), labels = newx, pos = 2)
library(rafalib)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
sum(e)
sum(e*x)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(x, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
x = runif(100, -3, 3); y = x + sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
x = runif(100, -3, 3); y = x + 4*sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
x = runif(100, -3, 3); y = x + sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))),
aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))),
aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
diamond$e <- resid(lm(price ~ carat, data = diamond))
g = ggplot(diamond, aes(x = carat, y = e))
g = g + xlab("Mass (carats)")
g = g + ylab("Residual price (SIN $)")
g = g + geom_hline(yintercept = 0, size = 2)
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
